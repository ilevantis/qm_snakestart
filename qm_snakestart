#! /usr/bin/env bash


if [ -z "$1" ] ; then
    echo "A project name is required as an argument. Run qm_snakestart -h to see details." >&2
    exit 1
fi

if [ "$1" = "-h" -o "$1" = "--help" ]; then
    printf "Usage: qm_snakestart path/to/PROJECTNAME

conda and conda-env are required for this script.

Creates a basic directory structure for a snakemake project and an
accompanying conda environment for use on Apocrita. The produced directory
structure looks like this:

PROJECTNAME
├── bin/
├── docs/
├── input_data/
├── manual_steps/
├── scripts/
├── .gitignore
├── README.md
├── Snakefile
├── runsnake
└── environment.yml

The conda environment will be named PROJECTNAME. Runsnake holds the parameters
for successfully running snakemake on Apocrita and can be used to launch
snakemake.\n"
    exit
fi

DATE="$(date +%Y-%m-%d)"
projectdir="${1}"
projectname="$(basename $1)"


mkdir -p ${projectdir} && cd ${projectdir}

mkdir bin docs input_data manual_steps scripts

echo "This directory contains 3rd party executables." \
  > bin/README

echo "This directory contains \`wid.md\`, reports, charts, notes etc..." \
  > docs/README

echo "This directory contains files/links to all data that the pipeline requires to run." \
  > input_data/README

echo "This directory contains files that were used during manual editing steps. Files produced manually for use in the pipeline should be copied to or linked from \`input_data\`" \
  > manual_steps/README

echo "This directory contains short scripts for use in manual steps or as part of the pipeline." \
  > scripts/README

cat << EOF > Snakefile
# Setup

import os, site, snakemake.shell

cur_env_dir = site.PREFIXES[0]				# get conda environment directory e.g. '~/miniconda3/envs/proj'
snakemake.shell.executable('/bin/bash')		# set snakemake shell executable
snakedir = srcdir('')[:-1]


def link_if(dirname):
    if os.path.exists(dirname):
        print("{}/{} already exists.".format(os.getcwd(), dirname))
    else:
        if os.path.exists(srcdir(dirname)):
			print("Creating symlink for {}.".format(srcdir(dirname)))
            os.symlink(srcdir(dirname), dirname)
        else:
            print("{} does not exist.".format(srcdir(dirname)))


if os.getcwd() != snakedir:
    for dir in ['bin', 'scripts', 'manual_steps', 'docs', 'input_data']:
        link_if(dir)



# ----------------------------------------------------------------------------------------------- #
# ${projectname}

EOF


cat << EOF > environment.yml
name: ${projectname}
channels:
  - r
  - defaults
  - conda-forge
  - bioconda
dependencies:
  - python=3
  - snakemake
EOF

cat << EOF > .gitignore
/[0-9][0-9]-*/
/.snakemake/
/temp/
__pycache__/
.DS_Store
/input_data/
/bin/*
!/bin/*.gz
EOF

cat << 'EOF' | sed -e "s/<PROJECTNAME>/${projectname}/g" > README.md
## Install

Requires [miniconda](http://conda.pydata.org/docs/install/quick.html) and [conda-env](https://github.com/conda/conda-env).

```bash
git clone USER/<PROJECTNAME>
cd <PROJECTNAME>
conda env create -f environment.yml
```

## Run pipeline

Ensure links in `input_data` are pointing to the correct locations.


```bash
runsnake analysis
```

## How this works

To list all available snakemake defined rules/commands:

```bash
snakemake -l
```

### Directories

+ `docs` contains `wid.md`, reports, charts, notes etc...
+ `input_data` contains files/links to all data that the pipeline requires to run
+ `manual_steps` contains files that were used during manual editing steps. Files produced manually for use in the pipeline should be copied to or linked from `input_data`
+ `scripts` contains short scripts for use in manual steps or as part of the pipeline
+ All folders beginning with digits contain data entirely generated by the pipeline and are ignored by git. Generally these are not to be edited.

### Useful files in root directory

+ `snakefile`
+ `README.md`
+ `environment.yml`
+ `.gitignore`

EOF

cat << 'EOF' | sed -e "s/<PROJECTNAME>/${projectname}/g" > runsnake
#! /usr/bin/env bash

scratch="/data/scratch/$USER"
dir=""
ARGS=""


while :; do
    case $1 in
        -h|--help)   # display a synopsis, then exit.
			printf "Usage: runsnake [OPTIONS] SNAKEMAKE_ARGS

Runs snakemake with appropriate options for Apocrita.


-d (--dir)     DEFAULT:/data/autoScratch/monthly/\$USER/<PROJECTNAME>.work
               Specify a workdirectory for snakemake. Use '.' to execute in
               the same dir as the snakefile.

SNAKEMAKE_ARGS The arguments to pass to snakemake.\n"
            exit
            ;;

        -d|--dir)
            if [ -n "$2" ]; then
                if [ ! -d "$2" ]; then
                    mkdir -p $2
                fi
                dir=$2
                shift
            else
                printf "ERROR: $1 requires a non-empty option argument.\n" >&2
                exit 1
            fi
            ;;

        *)    # Default case: break if no more args else add to args
            if [[ $# == 0 ]]; then
                break
            else
                ARGS="$ARGS $1"
            fi
            ;;
    esac
    shift
done

if [ -z "$dir" ]; then
    dir="$scratch/<PROJECTNAME>.work"
fi

snakemake --keep-going \
          --jobs 32 \
          --directory $dir \
          --cluster 'qsub -cwd -V -pe smp {threads} -l h_rt={params.runtime} -l h_vmem={params.mem}' \
          $ARGS

EOF

chmod +x runsnake
conda env create --file environment.yml

exit
